create : 
       0 last @ 36 + !
       postpone create
       postpone ] exit,

create ; 
       0 last @ 36 + !
       postpone last postpone @ 36 literal postpone + 
       0 literal postpone swap
       postpone !
       postpone [ postpone exit,
       exit, immediate

: >body 48 + ;
: body> 48 - ;
: >csa 44 + @ ;
: ['] ' ; immediate
: (postpone) dup literal >csa body> compile, ; 
: postpone ' (postpone) ; immediate
: here here @ ;
: 0= 0 = ;
: cr 10 emit ;
: u> u< invert ;
: begin here ; immediate  
: until here - postpone 0branch, ; immediate
: \ begin key 10 = until ; immediate
\ Loops continued
: r@ postpone r> postpone dup postpone >r ; immediate
: over swap dup >r swap r> ;
: do postpone >r postpone >r here ; immediate
: loop postpone here ; immediate
\ Conditional statements
: if 0 postpone 0branch, here ; immediate
: then dup here swap - swap 1 - c! ; immediate
: else 0 postpone branch, here >r dup here swap - swap 1 - c! r> ; immediate
: while postpone if ; immediate
: repeat swap here - postpone branch, postpone then ; immediate
: ?dup dup 0= if drop else dup then ;
\ Constants
: Constant : literal postpone ; ;  immediate
: case 0 ; immediate
: of postpone over postpone = postpone if postpone drop ; immediate
: endof postpone else ; immediate
: endcase postpone drop begin ?dup while postpone then  repeat ; immediate
: b 0 begin 1 while 1 + dup . repeat ;
saveimage
